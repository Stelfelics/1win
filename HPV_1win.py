import json
import urllib

from requests import post, get
from urllib.parse import unquote
from colorama import Fore
from datetime import datetime, timedelta
from threading import Thread, Lock
from typing import Literal
from random import randint
from time import sleep
from itertools import cycle

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker
from Core.Tools.HPV_User_Agent import HPV_User_Agent

from Core.Config.HPV_Config import *

headers = {
    'Accept': 'application/json, text/plain, */*',
    'Accept-Encoding': 'gzip, deflate, br, zstd',
    'Accept-Language': 'ru,en;q=0.9',
    'Content-Length': '44',
    'Content-Type': 'multipart/form-data; boundary=----WebKitFormBoundaryOzAYnWTxCoBURBph',
    'Dnt': '1',
    'Origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app',
    'Priority': 'u=1, i',
    'Referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/',
    'Sec-Ch-Ua-Mobile': '?1',
    'Sec-Ch-Ua-Platform': '"Android"',
    'Sec-Ch-Ua': '"Not/A)Brand";v="8", "Chromium";v="126", "YaBrowser";v="24.7", "Yowser";v="2.5"',
    'Sec-Fetch-Dest': 'empty',
    'Sec-Fetch-Mode': 'cors',
    'Sec-Fetch-Site': 'same-site',
    'User-Agent': HPV_User_Agent()
}


def Logging(Type: Literal['Success', 'Warning', 'Error'], argName: str, argSmile: str, argText: str) -> None:
    current_time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'

    with Console_Lock:
        color = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        divider = Fore.BLACK + ' | '  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

        name = Fore.MAGENTA + argName  # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        smile = color + str(argSmile)  # –°–º–∞–π–ª–∏–∫
        text = color + argText  # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

        print(current_time + divider + smile + divider + text + divider + name)


class HPV_1win:
    """
    AutoBot Ferma /// HPV
    ---------------------
    [1] - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏

    [2] - –°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤

    [3] - –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã

    [4] - –£–ª—É—á—à–µ–Ω–∏–µ –±—É—Å—Ç–æ–≤

    [5] - –ê–ø–≥—Ä–µ–π–¥ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ —É—Ä–æ–≤–Ω—è

    [6] - 1 —á–∞—Å –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–∞–ø–∞–Ω–∏—è

    [7] - –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤

    [8] - –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 1-3 —á–∞—Å–∞
    """

    def __init__(self, Name: str, URL: str, Proxy: dict = None) -> None:
        INFO = self.URL_Clean(URL)
        self.Name = Name  # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.id = INFO['id']  # ID –∞–∫–∫–∞—É–Ω—Ç–∞
        self.tg_web_data = INFO['tg_web_data']  # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Domain = 'https://crypto-clicker-backend-go-prod.100hp.app'  # –î–æ–º–µ–Ω –∏–≥—Ä—ã
        self.Proxy = Proxy  # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent
        self.Token = self.Authentication()  # –¢–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç–∞

    def URL_Clean(self, url: str) -> dict:

        """–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""

        try:

            # === –ø–æ–ª—É—á–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É
            tg_web_data = unquote(
                string=unquote(
                    string=url.split('tgWebAppData=', maxsplit=1)[1].split('&tgWebAppVersion', maxsplit=1)[0]))

            # === –ø–æ–ª—É—á–∏—Ç—å id –∏–∑ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            user_param = urllib.parse.parse_qs(tg_web_data).get('user', [None])[0]
            user_data = json.loads(urllib.parse.unquote(user_param))

            return {'id': user_data.get('id'), 'tg_web_data': tg_web_data}
        except Exception as error:
            Logging('Error', self.Name, 'üî¥', f'–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å—Å—ã–ª–∫–∏: {error}')
            return {'id': '', 'tg_web_data': ''}

    def Authentication(self) -> str:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""

        url = f'{self.Domain}/game/start?{self.tg_web_data}'
        headers['X-User-Id'] = str(self.id)

        try:
            Token = post(url, headers=headers, json=self.tg_web_data, proxies=self.Proxy).json()['token']
            Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')

            headers['Authorization'] = f'Bearer {Token}'

            return Token
        except Exception as error:
            Logging('Error', self.Name, 'üî¥', f'–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {error}')
            return ''

    def ReAuthentication(self) -> None:
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""

        self.Token = self.Authentication()

    def Get_Info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ, –ø—Ä–∏–±—ã–ª–∏ –≤ —á–∞—Å –∏ —Å–∏–ª–µ –∫–ª–∏–∫–∞"""

        url = f'{self.Domain}/user/balance'
        try:
            HPV = get(url, headers=headers, json=self.tg_web_data, proxies=self.Proxy).json()

            balance = HPV['coinsBalance']  # –ë–∞–ª–∞–Ω—Å
            hourProfit = HPV['miningPerHour']  # –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å
            clickPower = HPV['coinsPerClick']  # –°–∏–ª–∞ –∫–ª–∏–∫–∞
            currentEnergy = HPV['currentEnergy']

            return {
                'Balance': f'{balance:,}', 'Hour_Profit': f'{hourProfit:,}',
                'Click_Power': f'{clickPower:,}', 'currentEnergy': f'{currentEnergy:,}'
            }
        except Exception as error:
            Logging('Error', self.Name, 'üî¥', f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ: {error}')

    def Referral_Claim(self) -> dict:
        """–°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""

        url = f'{self.Domain}/friends/collect'
        try:
            HPV = post(url, headers=headers, json=self.tg_web_data, proxies=self.Proxy).json()
            money = HPV['coinsCollected']

            return {'status': True, 'collectedCoins': f'{money:,}'} if money > 0 else {'status': False}
        except Exception as error:
            Logging('Error', self.Name, 'üî¥', f'–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {error}')
            return {'status': False, 'collectedCoins': 0}

    def Daily_Reward(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã"""

        url = f'{self.Domain}/tasks/everydayreward'

        try:
            HPV_get = get(url, headers=headers, json=self.tg_web_data, proxies=self.Proxy).json()
            for item in HPV_get['days']:
                if not item['isCollected']:
                    HPV_post = post(url, headers=headers, json=self.tg_web_data, proxies=self.Proxy).json()
                    return {
                        'status': True,
                        'collectedCoins': HPV_post["collectedCoins"],
                        'collectedDay': item['id'][3:]
                    }

            return {'status': True, 'collectedCoins': 0}
        except Exception as error:
            Logging('Error', self.Name, 'üî¥', f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã: {error}')
            return {'status': False, 'collectedCoins': 0}

    def handle_req_energy_bonus(self, action: int) -> dict:
        url = f'{self.Domain}/energy/bonus'
        new_headers = {
            'Accept': '*/*',
            'Accept-Encoding': 'gzip, deflate, br, zstd',
            'Accept-Language': 'ru,en;q=0.9',
            'Dnt': '1',
            'Origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app',
            'Priority': 'u=1, i',
            'Referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/',
            'Sec-Ch-Ua-Mobile': '?1',
            'Sec-Ch-Ua-Platform': '"Android"',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-site',
            'User-Agent': headers['User-Agent'],
            'Authorization': headers['Authorization'],
            'X-User-Id': headers['X-User-Id']
        }

        try:
            if action == 1:
                HPV_get = get(url, headers=new_headers, proxies=self.Proxy).json()
                return {
                    'remaining': HPV_get['remaining'],
                    'seconds_to_next_use': HPV_get['seconds_to_next_use']
                }
            elif action == 2:
                HPV_post = post(url, headers=new_headers, proxies=self.Proxy).json()
                return {
                    'remaining': HPV_post['remaining'],
                    'seconds_to_next_use': HPV_post['seconds_to_next_use']
                }

        except Exception as error:
            Logging('Error', self.Name, 'üî¥', f'–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏: {error}')
            return {
                'remaining': -1,
                'seconds_to_next_use': -1
            }

    def handle_energy_bonus(self) -> dict:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–µ—Ä–≥–∏–∏ –∏ –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
            energy_status = self.handle_req_energy_bonus(action=1)

            remaining = energy_status['remaining']
            seconds_to_next_use = energy_status['seconds_to_next_use']

            if remaining > 0:
                if seconds_to_next_use == 0:
                    # –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∏ –µ—ë –º–æ–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å
                    apply_status = self.handle_req_energy_bonus(action=2)
                    Logging('Success', self.Name, 'üü¢',
                            f'–î–æ–ø. —ç–Ω–µ—Ä–≥–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å: {apply_status["remaining"]} —à—Ç.')
                    return {'remaining': apply_status['remaining']}
                else:
                    # –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏
                    # Logging('Warning', self.Name, 'üü°',
                    #         f'–≠–Ω–µ—Ä–≥–∏—è –µ—Å—Ç—å, –Ω–æ –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏. –î–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å: {seconds_to_next_use} —Å–µ–∫.')
                    return {'remaining': remaining, 'seconds_to_next_use': seconds_to_next_use}
            else:
                # –ï—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏–∏ –Ω–µ—Ç
                # Logging('Error', self.Name, 'üî¥',
                #         f'–≠–Ω–µ—Ä–≥–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –î–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {energy_status["remaining"]} —Å–µ–∫.')
                return {'remaining': remaining, 'seconds_to_next_use': seconds_to_next_use}

        except Exception as error:
            Logging('Error', self.Name, 'üî¥', f'–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏: {error}')
            return {'remaining': -1, 'seconds_to_next_use': -1}

    def Click(self) -> None:
        """–°–æ–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–∞–ø–æ–≤"""

        url = f'{self.Domain}/tap'
        Json = {'tapsCount': randint(29, 69)}
        try:

            new_headers = {
                'Accept': '*/*',
                'Accept-Encoding': 'gzip, deflate, br, zstd',
                'Accept-Language': 'ru,en;q=0.9',
                'Content-Length': '15',
                'Content-Type': 'application/json',
                'Dnt': '1',
                'Origin': 'https://cryptocklicker-frontend-rnd-prod.100hp.app',
                'Priority': 'u=1, i',
                'Referer': 'https://cryptocklicker-frontend-rnd-prod.100hp.app/',
                'Sec-Ch-Ua': '"Not/A)Brand";v="8", "Chromium";v="126", "YaBrowser";v="24.7", "Yowser";v="2.5"',
                'Sec-Ch-Ua-Mobile': '?1',
                'Sec-Ch-Ua-Platform': '"Android"',
                'Sec-Fetch-Dest': 'empty',
                'Sec-Fetch-Mode': 'cors',
                'Sec-Fetch-Site': 'same-site',
                'User-Agent': headers['User-Agent'],
                'Authorization': headers['Authorization'],
                'X-User-Id': headers['X-User-Id']

            }

            post(url, headers=new_headers, json=Json, proxies=self.Proxy)
            Logging('Success', self.Name, 'üü¢', '–¢–∞–ø —Å–æ–≤–µ—Ä—à—ë–Ω!')
        except Exception as error:
            Logging('Error', self.Name, 'üî¥', f'–ù–µ —É–¥–∞–ª–æ—Å—å —Ç–∞–ø–Ω—É—Ç—å: {error}')

    def Run(self) -> None:
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞"""

        while True:
            try:

                SLEEP_SEC = randint(21, 69)

                if self.Token:  # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
                    # –°–±–æ—Ä –º–æ–Ω–µ—Ç –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
                    Referral_Claim = self.Referral_Claim()
                    if Referral_Claim['status']:
                        Logging('Success', self.Name, 'üü¢',
                                f'–ú–æ–Ω–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å–æ–±—Ä–∞–Ω—ã! +{Referral_Claim["collectedCoins"]}')
                        sleep(SLEEP_SEC)  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                    else:
                        Logging('Error', self.Name, 'üî¥',
                                f'–ú–æ–Ω–µ—Ç—ã –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –±—ã–ª–∏ —Å–æ–±—Ä–∞–Ω—ã —Ä–∞–Ω–µ–µ –∏–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –Ω–µ—Ç!')
                        sleep(SLEEP_SEC)  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    daily_reward = self.Daily_Reward()
                    if daily_reward['status'] and daily_reward['collectedCoins']:
                        Logging('Success', self.Name, 'üü¢',
                                f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ó–∞ –≤—Ö–æ–¥ –Ω–∞ {daily_reward["collectedDay"]}—ã–π –¥–µ–Ω—å +{daily_reward["collectedCoins"]} –º–æ–Ω–µ—Ç!')
                        sleep(SLEEP_SEC)  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ
                    else:
                        Logging('Warning', self.Name, 'üü°',
                                f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ —É–∂–µ –±—ã–ª–∞ –ø–æ–ª—É—á–µ–Ω–∞!')
                        sleep(SLEEP_SEC)  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    # 1 —á–∞—Å –±–µ—Å–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ç–∞–ø–∞–Ω–∏—è
                    for _ in range(randint(550, 650)):
                        self.Click()

                        remain_energy = int(self.Get_Info()['currentEnergy'].replace(",", ""))
                        if remain_energy <= 50:
                            bonus_energy = self.handle_energy_bonus()
                            # if bonus_energy['remaining'] == 0 and  bonus_energy['seconds_to_next_use'] > 0:
                            #     print('Sleep 1-3 hours, remain energy 0')

                        sleep(randint(3, 6))  # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    Waiting = randint(4_000, 11_000)  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime(
                        '%Y-%m-%d %H:%M:%S')  # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    Logging('Success', self.Name, 'üí∞',
                            f'–ë–∞–ª–∞–Ω—Å: {self.Get_Info()["Balance"]} /// –ü—Ä–∏–±—ã–ª—å –≤ —á–∞—Å: {self.Get_Info()["Hour_Profit"]} /// –°–∏–ª–∞ –∫–ª–∏–∫–∞: {self.Get_Info()["Click_Power"]}')
                    Logging('Warning', self.Name, '‚è≥', f'–°–ª–µ–¥—É—é—â–∏–π —Å–±–æ—Ä –Ω–∞–≥—Ä–∞–¥: {Waiting_STR}!')

                    sleep(Waiting)  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 1 –¥–æ 3 —á–∞—Å–æ–≤
                    self.ReAuthentication()  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞

                else:  # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    sleep(randint(33, 66))  # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
                    self.ReAuthentication()  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
            except Exception as error:
                Logging('Error', self.Name, 'üî¥', f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –±–æ—Ç–∞: {error}')


if __name__ == '__main__':
    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()


    def Start_Thread(Account, URL, Proxy=None):
        _1win = HPV_1win(Account, URL, Proxy)
        _1win.Run()


    if Proxy:
        DIVIDER = Fore.BLACK + ' | '
        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'
        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)
        sleep(5)

    try:
        for Account, URL in HPV_Get_Accounts().items():
            if Proxy:
                Proxy = cycle(Proxy)
                Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
            else:
                Thread(target=Start_Thread, args=(Account, URL,)).start()
    except Exception as error:
        Logging('Error', 'BOT', 'üî¥', f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø–æ—Ç–æ–∫–∞: {error}')
